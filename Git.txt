Git Repository contains Files, History, Config
Git Repository contains .git directory

Stages:
working directory - lives files before adding, untracked area.
Staging Area - Git starts tracking / after adding / before commit
local repo - where git saves everything
Git Hub - remote repo

Two types of Version control system.
1. CVCS(Centralised Version control system)
2. DVCS(Distributed Version control system)

Configure the user details:
git config --global user.name "shiva kumar"
git config --global user.email "allamshivakumar009@gmail.com"

To list the config:
git config --list

git diff --> shows the differnce bw last commit and the present state of the files
git status
git log --> to get logs of the commits
git log --author "shiva kumar"
git log --oneline

git hub is a remote Repository.

SSH keys are used to authenticate while pushing the changes to github.

How to initialise a clone a repo in local
- Git add remote <repo nick name> <github repo url>
like - git remote origin https://github.com/Shivakumar1702/gitlearning.git
 git remote -v --> to check the remote Repository
- Git pull <repo nick name> <brach name>

Git reset
----------
commands - git reset --hard <commit id>
         - git reset hard removes the commit id and the changes made
         - git reset should be used for changes in local repo only.

         - git reset --soft <commit id>
         - git reset soft removes only the commit id and moves the file to staging directory.
         - git reset should be used for changes in local repo only.


git revert
-----------
commands - git revert <commit id>
         - git push origin branchname

         git revert is used to revert the changes once the code is pushed to remote Repository

git diff <filename> --> the change in the file between staging and the working directory for specific file
git diff --> the change between staging and the working directory (all the files)
git diff <commit id 1> <commit id 2> --> differnce between two commits

git branches -
list all branches -- git branch -a
switch branch -- git checkout <branch name>
rename branch -- git branch -m <old name> <new name>
delete branch -- git branch -d <branch name>
merge branch -- checkout to the main branch -- git merge <branch name>

git stash - to temporarily save the changes, to save the incomplete code
git stash list - to list the stashed changes
git stash apply - to remove the files from stash
git stash drop - To remove the files stash list after the files are removed from the stash
git stash -a - To stash the untracked files
git stash pop - removes the files from stash and also removes the file from queue.
git stash save "message" - to stash with a message
git stash show stash@{index} - to show the changes in the stash
git stash apply stash@{index} - to apply specific stash

testing